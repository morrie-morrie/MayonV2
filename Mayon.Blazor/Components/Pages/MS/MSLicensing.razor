@page "/MSLicensing"
@using Mayon.Application.Entities.Microsoft;
@using Mayon.Application.Entities.Microsoft.Infra.AzureAD;
@using Mayon.Application.Entities.Microsoft.Infra.Helper;
@using Mayon.Application.Microsoft.Graph;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Navigations;
@using Syncfusion.Blazor.DropDowns;
@using Mayon.Application.Entities.Microsoft.AzureAD;
@using Mayon.Application.Microsoft.Graph.Services;
@using Mayon.Application.Microsoft.Graph.AzureAD;

@inject AppDbContext _db

<h1>Microsoft Tenant Licensing:</h1>
  
<SfDropDownList
    TItem="InfraMsTenants" 
    TValue="string" 
    Placeholder="Select a tenant" 
    DataSource="@MSTenants"
    AllowFiltering="true"
    Value="@selectedTenant"
    ValueChanged="HandleValueChange">
    <DropDownListFieldSettings 
        Text="MsTenantDisplayName" 
        Value="MsTenantCustomerId">
    </DropDownListFieldSettings>
</SfDropDownList>

<div>
    <p></p>
        <p></p>
        </div>

@if (MSTenantLicenses != null)
{
    var filteredLicenses = MSTenantLicenses.Where(license => license.prepaidUnits.enabled != 0);

    <SfGrid DataSource="@filteredLicenses" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Width="800">
        <GridPageSettings PageSize="8"></GridPageSettings>
            <GridSortSettings>
            <GridSortColumns>
<GridSortColumn Field = "@nameof(MsTenantLicense.MSSkuFriendlyName)" Direction = "SortDirection.Ascending"> </GridSortColumn>
            </GridSortColumns>
            </GridSortSettings>
        <GridColumns>
            <GridColumn Field=@nameof(MsTenantLicense.MSSkuFriendlyName) HeaderText="License Name" Width="240" />
            <GridColumn HeaderText="Licenses Purchased" Width="110">
                <Template>
                    @{
                        var license = (context as MsTenantLicense);
                        <p>@license.prepaidUnits.enabled</p>
                    }
                </Template>
            </GridColumn>
            <GridColumn Field=@nameof(MsTenantLicense.consumedUnits) HeaderText="Licenses Used" Width="110" />
 
            <GridColumn HeaderText="Remaining Licences" Width="110">
                <Template>
                    @{
                        var license = (context as MsTenantLicense);
                        var remainingLicenses = license.prepaidUnits.enabled - license.consumedUnits;
                        <p>@remainingLicenses</p>
                    }
                </Template>
            </GridColumn>

            </GridColumns>
    </SfGrid>
}


@code {
    IEnumerable<InfraMsTenants> MSTenants;
    IEnumerable<MsTenantLicense> MSTenantLicenses;
    string selectedTenant;
    string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            MSTenants = await _db.infraMsTenants
            .AsNoTracking()
            .OrderBy(tenant => tenant.MsTenantDisplayName)
            .ToListAsync();
        }
        catch (DbUpdateException dbEx)
        {
            errorMessage = $"Database exception: {dbEx.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }

    private void HandleValueChange(string val)
    {
        selectedTenant = val;
        MSTenantLicenses = MSGraphADServices.GetMSTenantsLicenses(selectedTenant);

        // Load matching MSSkuFriendlyName for each MsTenantLicense
        List<MsTenantLicense> updatedLicenses = new List<MsTenantLicense>();
        foreach (var license in MSTenantLicenses)
        {
            InfraFriendlySkus friendlySku = null;
            foreach (var sku in _db.InfraFriendlySkus)
            {
                if (sku.MSSkuGUID == license.skuId)
                {
                    friendlySku = sku;
                    break;
                }
            }
            if (friendlySku != null)
            {
                var updatedLicense = license with { MSSkuFriendlyName = friendlySku.MSSkuDisplayName };
                updatedLicenses.Add(updatedLicense);
            }
        }
        MSTenantLicenses = updatedLicenses;
        StateHasChanged();
    }
}

<style>
    h1 {
        font-size: 1.5em;
        font-weight: bold;
        margin-top: 0px;
        outline: none;
    }
</style>